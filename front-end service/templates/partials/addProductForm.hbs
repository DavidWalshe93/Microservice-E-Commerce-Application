<addProductForm>
    <div class="container" id="addProduct">
        <br><br><br>
        <form id="addProductForm" class="needs-validation" novalidate>
            <h2>New Product Form</h2>
            <br><br><br>
            <div class="form-group">
                <label for="productNameInput">Product Name</label>
                <input type="text" name="name" class="form-control" id="productNameInput"
                       aria-describedby="productNameHelp"
                       placeholder="Enter name" required>
                <div class="valid-feedback">
                    Looks good.
                </div>
                <div class="invalid-feedback">
                    Please insert a product name.
                </div>
                <small id="productNameHelp" class="form-text text-muted">The products visible name</small>
            </div>
            <div class="form-group">
                <label for="productQuantityInput">Quantity</label>
                <input type="number" name="quantity" min=0 class="form-control" id="productQuantityInput"
                       aria-describedby="productQuantityHelp"
                       placeholder="Enter quantity" required>
                <div class="valid-feedback">
                    Looks good.
                </div>
                <div class="invalid-feedback">
                    Please insert a positive whole number.
                </div>
                <small id="productQuantityHelp" class="form-text text-muted">How many are available</small>
            </div>
            <div class="form-group">
                <label for="productPriceInput">Price</label>
                <input type="number" name="price" step=".01" min=0 class="form-control" id="productPriceInput"
                       aria-describedby="productPriceInput"
                       placeholder="Enter price" required>
                <div class="valid-feedback">
                    Looks good.
                </div>
                <div class="invalid-feedback">
                    Please insert a positive decimal number to the nearest cent.
                </div>
                <small id="productPriceHelp" class="form-text text-muted">The products normal price</small>
            </div>
            <div class="form-group">
                <label for="productImageInput">Image</label>
                <input type="file" name="image" class="form-control-file" id="productImageInput"
                       aria-describedby="productImageHelp"
                       placeholder="Add image">
                <small id="productImageHelp" class="form-text text-muted">The product's image (must be in the images
                    directory)</small>
            </div>
            <br><br><br>
            <button type="submit" class="btn btn-primary">Add Product</button>
        </form>
    </div>
    <script>

        // Submits form data to Server to save.
        const submitToServer = () => {
            // Add form data to AJAX data frame to be sent.
            let form = $("#addProductForm");
            let formData = parseFormData(form);
            if (formData.has("image") === false) {
                formData.append("image", "404.jpg")
            }

            // Convert data to JSON string.
            let jsonObject = formToJsonString(formData);

            // Send new product info to server.
            $.ajax({
                url: "http://localhost:3002/newProduct",
                type: "post",
                contentType: "application/json; charset=utf-8",
                data: jsonObject,
                success: function (res) {
                    alert('New product added');
                },
                error: function (xhr, status, error) {
                    console.log(xhr.responseText);
                }
            });
        };


        // Utility to convert form to a json string to send to server.
        const formToJsonString = (formData) => {
            let jsonObject = {};
            formData.forEach((value, key) => {
                jsonObject[key] = value
            });

            return JSON.stringify(jsonObject);
        };


        // Parses the form and extracts data to a FormData HTML object.
        const parseFormData = (form) => {
            let formData = new FormData();
            let formParams = form.serializeArray();

            // Extract image file names from "type=file" input fields and add it to the formData obj.
            $.each(form.find('input[type="file"]'), function (i, tag) {
                $.each($(tag)[0].files, function (i, file) {
                    formData.append(tag.name, file.name);
                });
            });

            // Extract data from standard input fields [text, textfield, checkbox, etc] and add it to the formData obj.
            $.each(formParams, function (i, val) {
                formData.append(val.name, val.value);
            });

            return formData;
        };


        // Starter JavaScript for disabling form submissions if there are invalid fields
        (() => {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                let forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        event.preventDefault();
                        event.stopPropagation();
                        if (form.checkValidity() === false) {
                            form.classList.add('was-validated');
                        } else {
                            form.classList.remove('was-validated');
                            submitToServer();
                            form.reset();
                        }

                    }, false);
                });
            }, false);
        })();

    </script>
</addProductForm>