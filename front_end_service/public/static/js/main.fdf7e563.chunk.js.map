{"version":3,"sources":["actions/cart.js","requests/baseRequest.js","requests/cart/addToCart.js","components/ProductPage/ProductCard.js","components/ProductPage/AddConfirmation.js","requests/product/getProductData.js","components/ProductPage/ProductPage.js","components/CartPage/CartModal.js","requests/cart/removeFromCart.js","components/CartPage/CartEntry.js","components/CartPage/CartTable.js","requests/order/addNewOrder.js","requests/cart/emptyCart.js","components/CartPage/CartToast.js","components/CartPage/CartPage.js","components/FormHelpers/TextField.js","actions/customers.js","requests/customer/login.js","validators/loginValidator.js","requests/cart/syncLocalCartToService.js","components/AccountToast.js","components/LoginPage.js","requests/customer/register.js","validators/registrationValidator.js","components/FormHelpers/CheckboxField.js","components/RegisterPage.js","components/NotFoundPage.js","components/Header/CartIcon.js","components/Header/LoggedOut.js","components/Header/LoggedIn.js","components/Header/Admin.js","components/Header/PageNavbar.js","components/Header/Header.js","requests/product/newProduct.js","validators/newProductValidator.js","components/NewProductPage.js","requests/customer/logout.js","components/LogoutPage.js","requests/order/getOrderData.js","components/OrderPage/OrderTable.js","components/OrderPage/OrderItems.js","components/OrderPage/OrderModal.js","components/OrderPage/OrderPage.js","routers/AppRouter.js","reducers/customers.js","reducers/cart.js","store/configureStore.js","index.js"],"names":["removeItem","productID","type","services","customer","process","USER_SERVICE_DEST","catalog","CATALOG_SERVICE_DEST","cart","CART_SERVICE_DEST","order","ORDER_SERVICE_DEST","ports","USER_SERVICE_PORT","CATALOG_SERVICE_PORT","CART_SERVICE_PORT","ORDER_SERVICE_PORT","getRequestContent","method","headers","mode","cache","credentials","redirect","referrerPolicy","serviceRequest","options","a","service","endpoint","body","console","log","toLowerCase","toUpperCase","requestContent","JSON","stringify","request","fetch","response","json","addToServiceCart","customerID","item","connect","state","props","data","displayConfirmation","useState","buyQuantity","setBuyQuantity","updatePrice","e","target","max","min","value","parseInt","v","isNaN","addToCart","getItem","updateLocalState","updateServiceState","quantity","dispatch","Object","assign","addItem","name","price","image","Card","className","Header","Img","variant","src","Body","Title","Badge","pill","InputGroup","Prepend","Text","id","Form","Control","onChange","disabled","toFixed","Button","onClick","block","AddConfirmation","show","setShow","aria-live","aria-atomic","Toast","onClose","delay","autohide","suffix","buildMessage","getProductData","setProducts","error","setError","ProductPage","setData","setQuantity","products","undefined","useEffect","then","message","Container","Row","map","product","Col","xs","key","CartModal","messageType","route","setRoute","header","to","pathname","returnPath","renderRedirect","Modal","size","onHide","dialogClassName","aria-labelledby","closeButton","removeFromServiceCart","removeFromCart","index","width","Image","height","CartTable","items","Table","striped","bordered","hover","newOrderRequest","saledate","Date","getTime","orderDetails","removeAllFromServiceCart","CartToast","showToast","setShowToast","toastMessage","setToastMessage","setItems","itemsInCart","setItemsInCart","setMessageType","length","fluid","span","offset","token","TextField","label","formik","getFieldProps","onBlur","touched","errors","Label","isInvalid","isValid","Feedback","loginCustomer","logoutCustomer","registerCustomer","loginRequest","email","password","res","LoginValidator","useFormik","initialValues","validationSchema","Yup","required","onSubmit","values","syncLocalCartToService","callback","AccountToast","location","syncLocalCart","noValidate","handleSubmit","Group","as","md","fieldWidth","controlId","registerRequest","RegistrationValidator","firstName","lastName","phone","verifyPassword","address1","address2","city","country","eircode","isAdmin","matches","trim","oneOf","CheckBoxField","Check","fieldOffset","NotFoundPage","setPrice","qty","forEach","alt","LoggedOut","Nav","Navbar","Brand","Link","NavLink","activeClassName","LoggedIn","Admin","pageLoginState","setPageLoginState","accountName","setAccountName","fixed","expand","bg","Toggle","aria-controls","Collapse","newProductRequest","NewProductValidator","integer","NewProductPage","logoutRequest","LogoutPage","content","this","React","Component","getOrderData","setOrders","setModalData","orders","tableData","setTableData","columns","field","sort","align","convertMillisToDataTime","saleDateInMs","datetime","setTime","date","getDate","padStart","month","getMonth","year","getFullYear","keys","rows","orderTotal","orderSize","orderNo","orderID","saleDate","button","color","createTableRow","small","OrderItems","modalData","OrderModal","OrderPage","AppRouter","path","component","exact","CartPage","LoginPage","RegisterPage","userReducerDefaultState","customerReducer","action","cartReducerDefaultState","cartReducer","itemExists","some","filter","customerPersistConfig","storage","cartPersistConfig","persistedCustomerReducer","persistReducer","persistedCartReducer","store","createStore","combineReducers","persistor","persistStore","configureStore","getState","jsxRoot","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fdf7e563.chunk.js","sourcesContent":["// Created by David Walshe on 09/03/2020\r\n\r\nexport const addItem = (item) => ({\r\n    type: \"ADD\",\r\n    item: Object.assign({}, item),\r\n});\r\n\r\nexport const syncCart = (items) => ({\r\n    type: \"SYNC\",\r\n    items: items\r\n});\r\n\r\nexport const removeItem = (productID) => ({\r\n    type: \"REMOVE\",\r\n    productID\r\n});\r\n\r\nexport const removeAll = () => ({\r\n    type: \"REMOVE_ALL\"\r\n});\r\n\r\n","// Created by David Walshe on 14/03/2020\r\n\r\nconst services = {\r\n    customer: process.env.USER_SERVICE_DEST || \"http://localhost\",\r\n    catalog: process.env.CATALOG_SERVICE_DEST || \"http://localhost\",\r\n    cart: process.env.CART_SERVICE_DEST || \"http://localhost\",\r\n    order: process.env.ORDER_SERVICE_DEST || \"http://localhost\"\r\n};\r\n\r\nconst ports = {\r\n    customer: process.env.USER_SERVICE_PORT || 3001,\r\n    catalog: process.env.CATALOG_SERVICE_PORT || 3002,\r\n    cart: process.env.CART_SERVICE_PORT || 3003,\r\n    order: process.env.ORDER_SERVICE_PORT || 3004\r\n};\r\n\r\nconst getRequestContent = (method, headers) => {\r\n    // Request content to send\r\n    return {\r\n        method,\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        credentials: 'same-origin',\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            'Content-Type': 'application/json;charset=UTF-8',\r\n            ...headers\r\n        },\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n    };\r\n};\r\n\r\nconst serviceRequest = async (options) => {\r\n\r\n    // Deconstruct options\r\n    let {service, endpoint, method, headers, body} = {...options};\r\n\r\n    console.log(options);\r\n\r\n    // Pre-processing\r\n    service = service.toLowerCase();\r\n    method = method.toUpperCase();\r\n    headers = !!headers ? headers : {};\r\n\r\n    let requestContent = getRequestContent(method, headers);\r\n\r\n    // Append body field if required.\r\n    if (method === \"POST\") {\r\n        body = !!body ? body : {};\r\n        body = JSON.stringify(body);\r\n        requestContent = {\r\n            ...requestContent,\r\n            body\r\n        }\r\n    }\r\n\r\n    // Request template\r\n    const request = `${services[service]}:${ports[service]}/${endpoint}`\r\n    console.log(\"REQ\", request)\r\n    const response = await fetch(request, requestContent);\r\n\r\n    // Return JSON response\r\n    return await response.json();\r\n};\r\n\r\nexport default serviceRequest;\r\n","// Created by David Walshe on 14/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst addToServiceCart = async (customerID, item) => {\r\n    /**\r\n     * Helper function to send a request to the cart service to add to an item to the database\r\n     * and return the service response.\r\n     */\r\n\r\n    return serviceRequest({\r\n        service: \"cart\",\r\n        endpoint: \"add\",\r\n        method: \"POST\",\r\n        body: {\r\n            ...item,\r\n            customerID\r\n        }\r\n    });\r\n};\r\n\r\nexport default addToServiceCart;","// Created by David Walshe on 25/02/2020\r\n// npm imports\r\nimport React, {useState} from \"react\";\r\nimport {Badge, Button, Card, Form} from \"react-bootstrap\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport \"../../styles/styles.scss\"\r\nimport {connect} from \"react-redux\";\r\nimport {addItem} from \"../../actions/cart\";\r\nimport addToServiceCart from \"../../requests/cart/addToCart\";\r\n\r\nconst ProductCard = (props) => {\r\n\r\n    // Deconstruct params\r\n    const {data, displayConfirmation} = {...props};\r\n\r\n    // Setup component state\r\n    const [buyQuantity, setBuyQuantity] = useState(1);\r\n\r\n    const updatePrice = (e) => {\r\n        /**\r\n         * Callback to update shown price of item when selected quantity changes.\r\n         */\r\n        let {max, min, value} = e.target;\r\n        max = parseInt(max);\r\n        min = parseInt(min);\r\n\r\n        let v = !isNaN(value) && value >= min && value <= max ? value : \"\";\r\n        setBuyQuantity(v)\r\n    };\r\n\r\n    const addToCart = async (e) => {\r\n        /**\r\n         * Callback method when buy button is clicked.\r\n         */\r\n        const item = getItem();\r\n\r\n        displayConfirmation(data, buyQuantity);\r\n        setBuyQuantity(1);\r\n        if (!props.customer.customerID) {\r\n            await updateLocalState(item)\r\n        } else {\r\n            await updateServiceState(item)\r\n        }\r\n    };\r\n\r\n    const getItem = () => {\r\n        /**\r\n         * Helper method to return item data to add to cart.\r\n         */\r\n        return {\r\n            ...data,\r\n            quantity: parseInt(buyQuantity)\r\n        }\r\n    };\r\n\r\n    const updateLocalState = (item) => {\r\n        /**\r\n         * Updates the local state of React if a item is added to the cart.\r\n         */\r\n        props.dispatch(addItem(item));\r\n    };\r\n\r\n    const updateServiceState = async (item) => {\r\n        /**\r\n         * Updates the service database if an item is added to the cart and a user is logged in.\r\n         */\r\n        try {\r\n            const response = await addToServiceCart(props.customer.customerID, item);\r\n            updateLocalState({\r\n                productID: response.productID,\r\n                name: response.name,\r\n                price: response.price,\r\n                quantity: item.quantity,        // Server has absolute quantity, we only want to add the relative increase in quantity to the current state.\r\n                image: response.image,\r\n            });\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card className={\"h-100 shadow-sm bg-white rounded\"}>\r\n                <Card.Header className={\"d-flex mb2-2 justify-content-around\"}>{data.name}</Card.Header>\r\n                <Card.Img variant={\"top\"} src={data.image}/>\r\n                {console.log(data.image)}\r\n\r\n                <Card.Body className={\"d-flex flex-column\"}/>\r\n                <div className={\"d-flex mb-2 justify-content-around\"}>\r\n                    <Card.Title className={\"mb-0 font-weight-bold\"}>{data.quantity} In-Stock</Card.Title>\r\n                    <br/>\r\n                    <Badge pill className={\"mb-2\"} variant={\"warning\"}>\r\n                        €{data.price}\r\n                    </Badge>\r\n                </div>\r\n                {/*<Card.Text className={\"text-secondary\"}></Card.Text>*/}\r\n                <div className={\"d-flex mb-2 justify-content-around quantity-gauge\"}>\r\n                    <InputGroup>\r\n                        <div className={\"d-flex mb-2 justify-content-around\"}>\r\n                            <div className={\"d-flex mb-2 justify-content-around input-quantity\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon1\">#</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control\r\n                                    className={\"input-quantity\"}\r\n                                    type={\"number\"}\r\n                                    min={1}\r\n                                    max={data.quantity}\r\n                                    name={`qty${data.productID}`}\r\n                                    value={buyQuantity}\r\n                                    onChange={(e) => updatePrice(e)} //setBuyQuantity(e.target.value >= 1 && !isNaN(e.target.value) ? e.target.value : \"\")}\r\n                                />\r\n                            </div>\r\n                            <div className={\" d-flex mb-2 justify-content-aroundinput-price\"}>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Text id=\"basic-addon2\">€</InputGroup.Text>\r\n                                </InputGroup.Prepend>\r\n                                <Form.Control\r\n                                    className={\"input-price\"}\r\n                                    type={\"text\"}\r\n                                    disabled={true}\r\n                                    name={`price${data.productID}`}\r\n                                    value={(buyQuantity * data.price).toFixed(2)}\r\n                                    onChange={updatePrice}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </InputGroup>\r\n                </div>\r\n\r\n                <Button\r\n                    // onClick={() => displayConfirmation(data)}\r\n                    onClick={async (e) => {\r\n                        await addToCart(e);\r\n                    }}\r\n                    className={\"mt-auto font-weight-bold\"}\r\n                    variant={\"success\"}\r\n                    block\r\n                >Buy</Button>\r\n            </Card>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customer\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(ProductCard);","// Created by David Walshe on 26/02/2020\r\n\r\n// npm import\r\nimport React from \"react\";\r\nimport {Toast} from \"react-bootstrap\";\r\nimport \"../../styles/styles.scss\";\r\n\r\nconst AddConfirmation = ({data, quantity, show, setShow}) => {\r\n\r\n\r\n    const buildMessage = () => {\r\n        /**\r\n         * Returns notification message with plural or singular suffix depending on\r\n         * quantity added.\r\n         */\r\n        let suffix = \"\";\r\n        if (quantity > 1) {\r\n            suffix = \"s\"\r\n        }\r\n\r\n        return `${quantity} '${data.name}'${suffix} added to your cart`\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                aria-live=\"polite\"\r\n                aria-atomic=\"true\"\r\n                className={\"toast-wrapper\"}\r\n            >\r\n                <Toast\r\n                    show={show > 0} onClose={() => setShow(false)} delay={3000} autohide>\r\n                    <Toast.Header>\r\n                        <strong className={\"mr-auto\"}>{buildMessage()}</strong>\r\n                        <small>Just now</small>>\r\n                    </Toast.Header>\r\n                </Toast>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AddConfirmation;","// Created by David Walshe on 09/03/2020\r\n\r\n// Request Data from catalog service\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst getProductData = async (setProducts, error, setError) => {\r\n    if (!error) {\r\n        try {\r\n            const response = await serviceRequest({\r\n                service: \"catalog\",\r\n                endpoint: \"getProducts\",\r\n                method: \"GET\",\r\n                body: null\r\n            });\r\n\r\n\r\n            // Update state\r\n            setProducts(response);\r\n        } catch (e) {\r\n            setError(e);\r\n        }\r\n    }\r\n};\r\n\r\nexport default getProductData;","// Created by David Walshe on 25/02/2020\r\n\r\n// npm imports\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\n// local imports\r\nimport ProductCard from \"./ProductCard\";\r\nimport AddConfirmation from \"./AddConfirmation\";\r\nimport getProductData from \"../../requests/product/getProductData\";\r\n\r\nconst ProductPage = () => {\r\n\r\n    // State\r\n    const [show, setShow] = useState(0);\r\n    const [data, setData] = useState({});\r\n    const [quantity, setQuantity] = useState(0);\r\n    const [products, setProducts] = useState([]);\r\n    const [error, setError] = useState(undefined);\r\n\r\n    // Hooks\r\n    useEffect(() => {\r\n        getProductData(setProducts, error, setError).then();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // Show toast notification.\r\n    const displayConfirmation = (data, buyQuantity) => {\r\n        setQuantity(buyQuantity);\r\n        setShow(true);\r\n        setData(data);\r\n    };\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>\r\n    } else {\r\n        return (\r\n            <Container>\r\n                {<AddConfirmation data={data} quantity={quantity} show={show} setShow={setShow}/>}\r\n                <Row>\r\n                    {products.map((product) => (\r\n                        <Col xs={4} className={\"mb-5\"} key={product.productID}>\r\n                            <ProductCard data={product} displayConfirmation={displayConfirmation}/>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n};\r\n\r\nexport default ProductPage;\r\n","// Created by David Walshe on 15/03/2020\r\n\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst CartModal = (props) => {\r\n\r\n    const {show, setShow, messageType} = {...props};\r\n\r\n\r\n    const [route, setRoute] = useState(\"MODAL\");\r\n\r\n    useEffect(() => {\r\n        setRoute(\"MODAL\");\r\n    }, []);\r\n\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const message = () => {\r\n        /**\r\n         * Helper method in getting the correct header and body for a Modal messsage.\r\n         */\r\n        switch (messageType) {\r\n            case \"LOGIN\":\r\n                return {\r\n                    header: \"You forgot to login first\",\r\n                    body: \"To ensure we can keep you up-to-date with your order as it processes we require\\n\" +\r\n                        \"you to login/register. This will only take a few moments of your time but\\n\" +\r\n                        \"will help eliminate any issues in keeping you up-to-date with your order.\"\r\n                };\r\n            default:\r\n                return {\r\n                    header: \"Internal error\",\r\n                    body: \"No information to show for messageType: \" + messageType\r\n                }\r\n        }\r\n    };\r\n\r\n    const renderRedirect = () => {\r\n        /**\r\n         * Renders the login/register field if the user selects the corresponding button\r\n         * in the pop-up modal. Passes the return path on success as well.\r\n         */\r\n        switch (route) {\r\n            case \"LOGIN\":\r\n                return <Redirect to={{\r\n                    pathname: \"/login\",\r\n                    state: {\r\n                        returnPath: \"/cart\"\r\n                    }\r\n                }}/>;\r\n            case \"REGISTER\":\r\n                return <Redirect to={{\r\n                    pathname: \"/register\",\r\n                    state: {\r\n                        returnPath: \"/cart\"\r\n                    }\r\n                }}/>;\r\n            default:\r\n                return null\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {renderRedirect()}\r\n            <Modal\r\n                show={show}\r\n                size={\"lg\"}\r\n                onHide={() => setShow(false)}\r\n                dialogClassName=\"modal-90w\"\r\n                aria-labelledby=\"login-warning-message\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"login-warning-message\">\r\n                        {message().header}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{message().body}</p>\r\n                    <Button\r\n                        className={\"modal-button-primary\"}\r\n                        variant=\"primary\"\r\n                        onClick={(e) => setRoute(\"LOGIN\")}\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                    <Button\r\n                        className={\"modal-button-primary\"}\r\n                        variant=\"primary\"\r\n                        onClick={(e) => setRoute(\"REGISTER\")}\r\n                    >\r\n                        Register\r\n                    </Button>\r\n                    <Button\r\n                        className={\"modal-button-secondary\"}\r\n                        variant=\"secondary\"\r\n                        onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CartModal;","// Created by David Walshe on 14/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst removeFromServiceCart = async (customerID, productID) => {\r\n    /**\r\n     * Helper function to send a request to the cart service to add to an item to the database\r\n     * and return the service response.\r\n     */\r\n    return serviceRequest({\r\n        service: \"cart\",\r\n        endpoint: `cart/${customerID}/items/${productID}`,\r\n        method: \"DELETE\",\r\n        body: null\r\n    });\r\n};\r\n\r\nexport default removeFromServiceCart;","// Created by David Walshe on 12/03/2020\r\n\r\n// NPM imports\r\nimport {Button, Image} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n// Local imports\r\nimport {removeItem} from \"../../actions/cart\";\r\nimport removeFromServiceCart from \"../../requests/cart/removeFromCart\";\r\n\r\n\r\nconst CartEntry = (props) => {\r\n\r\n    const removeFromCart = async () => {\r\n        /**\r\n         *  Callback to delete a single item from cart.\r\n         */\r\n        if (!props.customerID) {                                // User logged in.\r\n            await updateLocalState(props.item.productID)\r\n        } else {                                                // User not logged in.\r\n            await updateServiceState(props.item.productID, props.customerID)\r\n        }\r\n    };\r\n\r\n    const updateLocalState = async (productID) => {\r\n        /**\r\n         * Updates the local state of React for when a item is deleted.\r\n         */\r\n        props.dispatch(removeItem(productID))\r\n    };\r\n\r\n    const updateServiceState = async (productID, customerID) => {\r\n        /**\r\n         * Updates the service database when an item is deleted and a user is logged in.\r\n         */\r\n        const response = await removeFromServiceCart(customerID, productID);\r\n        await updateLocalState(parseInt(response.productID))\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td className={\"table-item\"}>{props.index + 1}</td>\r\n            <td width={\"80px\"}><Image width={\"200px\"} height={\"150px\"} src={props.item.image}/></td>\r\n            <td className={\"table-item\"}>{props.item.name}</td>\r\n            <td className={\"table-item\"}>€{props.item.price}</td>\r\n            <td className={\"table-item\"}>{props.item.quantity}</td>\r\n            <td className={\"table-item\"}>€{(props.item.price * props.item.quantity).toFixed(2)}</td>\r\n            <td width={\"30px\"} className={\"table-item\"}>\r\n                <Button\r\n                    onClick={async (e) => {\r\n                        await removeFromCart()\r\n                    }}\r\n                    variant={\"danger\"}\r\n                >Remove\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customerID: state.customer.customerID,\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(CartEntry);","// Created by David Walshe on 15/03/2020\r\n\r\nimport CartEntry from \"./CartEntry\";\r\nimport {Table} from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nconst CartTable = (props) => {\r\n\r\n    const items = props.items;\r\n\r\n    return (\r\n        <Table striped bordered hover size={\"sm\"} variant=\"dark\">\r\n            <thead>\r\n            <tr>\r\n                <th className={\"table-header\"}>#</th>\r\n                <th className={\"table-header\"}>Product</th>\r\n                <th className={\"table-header\"}>Product Name</th>\r\n                <th className={\"table-header\"}>Unit Price</th>\r\n                <th className={\"table-header\"}>Quantity</th>\r\n                <th className={\"table-header\"}>Total</th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {items.map((item, index) => (\r\n                <CartEntry key={index} item={item} index={index}/>\r\n            ))}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n};\r\n\r\nexport default CartTable;","// Created by David Walshe on 16/03/2020\r\n\r\n// Request Data from catalog service\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst newOrderRequest = async (customerID, items) => {\r\n    // if (!error) {\r\n\r\n    try {\r\n        const response = await serviceRequest({\r\n            service: \"order\",\r\n            endpoint: \"newOrder\",\r\n            method: \"POST\",\r\n            body: {\r\n                customerID,\r\n                saledate: new Date().getTime(),\r\n                orderDetails: [\r\n                    ...items,\r\n                ]\r\n            }\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n    // }\r\n};\r\n\r\nexport default newOrderRequest;","// Created by David Walshe on 17/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst removeAllFromServiceCart = async (customerID) => {\r\n    /**\r\n     * Helper function to send a request to the cart service to remove all items from the database.\r\n     */\r\n    try {\r\n        await serviceRequest({\r\n            service: \"cart\",\r\n            endpoint: `cart/${customerID}/items`,\r\n            method: \"DELETE\",\r\n            body: null\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n\r\nexport default removeAllFromServiceCart;","// Created by David Walshe on 17/03/2020\r\n\r\n// Created by David Walshe on 26/02/2020\r\n\r\n// npm import\r\nimport React from \"react\";\r\nimport {Toast} from \"react-bootstrap\";\r\nimport \"../../styles/styles.scss\";\r\n\r\nconst CartToast = ({show, setShow, message}) => {\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                aria-live=\"polite\"\r\n                aria-atomic=\"true\"\r\n                className={\"toast-wrapper\"}\r\n            >\r\n                <Toast\r\n                    show={show > 0} onClose={() => setShow(false)} delay={3000} autohide>\r\n                    <Toast.Header>\r\n                        <strong className={\"mr-auto\"}>{message}</strong>\r\n                        <small>Just now</small>>\r\n                    </Toast.Header>\r\n                </Toast>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CartToast;","// Created by David Walshe on 25/02/2020\r\n\r\n// npm import\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Button, Col, Container} from \"react-bootstrap\";\r\n// Local imports\r\nimport \"../../styles/styles.scss\"\r\nimport {connect} from \"react-redux\";\r\nimport CartModal from \"./CartModal\";\r\nimport CartTable from \"./CartTable\";\r\nimport newOrderRequest from \"../../requests/order/addNewOrder\";\r\nimport removeAllFromServiceCart from \"../../requests/cart/emptyCart\";\r\nimport {removeAll} from \"../../actions/cart\";\r\nimport CartToast from \"./CartToast\";\r\n\r\n\r\nconst CartPage = (props) => {\r\n\r\n    const {customer} = {...props};\r\n\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [toastMessage, setToastMessage] = useState(undefined);\r\n    const [items, setItems] = useState(props.cart.items);\r\n    const [itemsInCart, setItemsInCart] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const [messageType, setMessageType] = useState(\"LOGIN\");\r\n\r\n    useEffect(() => {\r\n        /**\r\n         * Updates view when the redux cart items change state.\r\n         */\r\n        setItems(props.cart.items);\r\n    }, [props.cart.items]);\r\n\r\n    useEffect(() => {\r\n        /**\r\n         * Enables/Disables the order/empty cart button depending if items are present in cart.\r\n         */\r\n        if (items.length > 0) {             // Cart is empty\r\n            setItemsInCart(false);\r\n        } else {                            // Cart has items\r\n            setItemsInCart(true);\r\n        }\r\n    }, [items]);\r\n\r\n    const placeOrder = (e) => {\r\n        /**\r\n         * Places an order with the orderservice and clears the state of the cart service and redux\r\n         * state of the current user..\r\n         */\r\n        if (props.customer.token) {\r\n            if (newOrderRequest(customer.customerID, items)) {\r\n                removeAllFromServiceCart(customer.customerID);\r\n                props.dispatch(removeAll());\r\n                setToastMessage(\"Your order has been placed\");\r\n            }\r\n            // setGoToOrders(true);\r\n        } else {\r\n            setMessageType(\"LOGIN\");\r\n            setShow(true)\r\n        }\r\n    };\r\n\r\n    const emptyCart = () => {\r\n        if (props.customer.token) {\r\n            removeAllFromServiceCart(customer.customerID);\r\n        }\r\n        props.dispatch(removeAll());\r\n        setToastMessage(\"Your basket has been emptied\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (toastMessage) {\r\n            setShowToast(true);\r\n        }\r\n    }, [toastMessage]);\r\n\r\n    useEffect(() => {\r\n        if (!showToast) {\r\n            setToastMessage(undefined);\r\n        }\r\n    }, [showToast]);\r\n\r\n    const btn_inline_style = \"mx-5 p-2\";\r\n\r\n    return (\r\n        <>\r\n            <CartModal show={show} setShow={setShow} messageType={messageType}/>\r\n            {showToast && <CartToast show={showToast} setShow={setShowToast} message={toastMessage}/>}\r\n            <Container fluid={true}>\r\n                <Col xs={{span: 10, offset: 1}}>\r\n                    <div className={\"d-flex justify-content-around\"}>\r\n                        <Button className={`cart-button ${btn_inline_style}`}\r\n                                variant={\"success\"}\r\n                                onClick={placeOrder}\r\n                                disabled={itemsInCart}\r\n                        >\r\n                            <p className={\"button-text\"}>Place Order</p>\r\n                        </Button>\r\n                        <Button className={`cart-button ${btn_inline_style}`}\r\n                                variant={\"danger\"}\r\n                                onClick={emptyCart}\r\n                                disabled={itemsInCart}\r\n                        >\r\n                            <p className={\"button-text\"}>Empty Cart</p>\r\n                        </Button>\r\n                    </div>\r\n                    <CartTable items={items}/>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customer,\r\n        cart: state.cart\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(CartPage);","// Created by David Walshe on 26/02/2020\r\n\r\nimport React from \"react\";\r\nimport {Form} from \"react-bootstrap\";\r\n\r\n\r\nconst TextField = ({label, name, formik, type = \"text\"}) => {\r\n\r\n    // Unpack variables\r\n    const {onChange, onBlur, value} = {...formik.getFieldProps(name)};\r\n    const touched = formik.touched[`${name}`];\r\n    const error = formik.errors[`${name}`];\r\n\r\n    return (\r\n        <>\r\n            <Form.Label>{label}</Form.Label>\r\n            <Form.Control\r\n                type={type}\r\n                name={name}\r\n                value={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                isInvalid={touched && error}\r\n                isValid={touched && !error}\r\n            />\r\n            <Form.Control.Feedback/>\r\n            <Form.Control.Feedback type={\"invalid\"}>{error}</Form.Control.Feedback>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nexport default TextField;","// Created by David Walshe on 08/03/2020\r\n\r\nexport const loginCustomer = (response) => ({\r\n    type: \"LOGIN\",\r\n    customer: response.customer,\r\n    token: response.token,\r\n});\r\n\r\nexport const logoutCustomer = () => ({\r\n    type: \"LOGOUT\"\r\n});\r\n\r\nexport const registerCustomer = (response) => ({\r\n    type: \"REGISTER\",\r\n    customer: response.customer,\r\n    token: response.token\r\n});\r\n","// Created by David Walshe on 08/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\n// Handles login requests to the customer service\r\nconst loginRequest = async (email, password, setShowToast) => {\r\n\r\n    return serviceRequest({\r\n        service: \"customer\",\r\n        endpoint: \"login\",\r\n        method: \"POST\",\r\n        body: {\r\n            email,\r\n            password\r\n        }\r\n    }).then((res) => {\r\n        if (res.error === \"DOES_NOT_EXIST\") {\r\n            setShowToast(true);\r\n        } else {\r\n            return res;\r\n        }\r\n    });\r\n};\r\n\r\nexport default loginRequest;","// Created by David Walshe on 07/03/2020\r\n\r\n// npm imports\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\n// Local imports\r\nimport {loginCustomer} from \"../actions/customers\";\r\nimport loginRequest from \"../requests/customer/login\"\r\n\r\nconst LoginValidator = (props) => {\r\n\r\n    console.log(props);\r\n\r\n    const {dispatch, setShowToast} = {...props};\r\n\r\n    return useFormik({\r\n        initialValues: {\r\n            email: \"mytest@example.com\",\r\n            password: \"myPass\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .required('No email was provided')\r\n                .email('Invalid email address'),\r\n            password: Yup.string()\r\n                .required('No password was provided'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            let response = null;\r\n            try {\r\n                // Update customer session.\r\n                response = await loginRequest(values.email, values.password, setShowToast)\r\n            } catch (e) {\r\n\r\n                console.log(typeof setShowToast);\r\n                setShowToast(true);\r\n                console.log(e)\r\n            }\r\n            dispatch(loginCustomer(response));\r\n        },\r\n    });\r\n};\r\n\r\nexport default LoginValidator;","// Created by David Walshe on 14/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst syncLocalCartToService = async (callback, items, customerID) => {\r\n    /**\r\n     * Helper method to push local items in the cart to be persistent in the Service database\r\n     * on a login. Synchronises local state when service response is returned.\r\n     */\r\n    await serviceRequest({\r\n        service: \"cart\",\r\n        endpoint: \"bulkAdd\",\r\n        method: \"POST\",\r\n        body: {\r\n            customerID,\r\n            items: {...items}\r\n        }\r\n    }).then((data) => {\r\n        callback(data);\r\n    });\r\n};\r\n\r\nexport default syncLocalCartToService;","// Created by David Walshe on 17/03/2020\r\n\r\n// Created by David Walshe on 17/03/2020\r\n\r\n// Created by David Walshe on 26/02/2020\r\n\r\n// npm import\r\nimport React from \"react\";\r\nimport {Toast} from \"react-bootstrap\";\r\nimport \"../styles/styles.scss\";\r\n\r\nconst AccountToast = ({show, setShow, message}) => {\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                aria-live=\"polite\"\r\n                aria-atomic=\"true\"\r\n                className={\"toast-wrapper\"}\r\n            >\r\n                <Toast\r\n                    show={show > 0} onClose={() => setShow(false)} delay={3000} autohide>\r\n                    <Toast.Header>\r\n                        <strong className={\"mr-auto\"}>{message}</strong>\r\n                        <small>Just now</small>>\r\n                    </Toast.Header>\r\n                </Toast>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AccountToast;","// Created by David Walshe on 25/02/2020\r\n\r\n// npm imports\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\"\r\nimport {Button, Col, Form} from \"react-bootstrap\"\r\nimport {Redirect} from \"react-router-dom\";\r\n// local imports\r\nimport TextField from \"./FormHelpers/TextField\";\r\nimport LoginValidator from \"../validators/loginValidator\";\r\nimport \"../styles/styles.scss\"\r\nimport {syncCart} from \"../actions/cart\";\r\nimport syncLocalCartToService from \"../requests/cart/syncLocalCartToService\";\r\nimport AccountToast from \"./AccountToast\";\r\n\r\nconst LoginPage = (props) => {\r\n\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    const returnPath = !!props.location.state ? props.location.state.returnPath : \"/\";\r\n\r\n    const formik = LoginValidator({\r\n        dispatch: props.dispatch,\r\n        setShowToast\r\n    });\r\n\r\n    const fieldWidth = 3;\r\n    const fieldOffset = 4;\r\n\r\n    useEffect(() => {\r\n        // If logged in.\r\n        if (!!props.customer.token) {\r\n            // Map items with additional field of customerID for service usage.\r\n            const items = props.cart.items.map((item) => {\r\n                return {\r\n                    ...item,\r\n                    customerID: props.customer.customerID\r\n                }\r\n            });\r\n\r\n            // Synchronises local cart state with service cart.\r\n            syncLocalCartToService(syncLocalCart, items, props.customer.customerID);\r\n        }\r\n    }, [props.customer]);\r\n\r\n    // Callback for updating local state.\r\n    const syncLocalCart = (data) => {\r\n        props.dispatch(syncCart(data));\r\n    };\r\n\r\n    if (props.customer.token) {\r\n        return <Redirect to={returnPath}/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AccountToast show={showToast} setShow={setShowToast} message={\"Incorrect account details\"}/>\r\n            <Form noValidate onSubmit={formik.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md={{span: fieldWidth + 3, offset: fieldOffset}}>\r\n                        {/*Heading*/}\r\n                        <h4 className={\"login-msg\"}>Welcome back</h4>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Email*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"email\"}>\r\n                        <TextField name=\"email\" label=\"Email\" formik={formik} type={\"email\"}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Password*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"password\"}>\r\n                        <TextField name=\"password\" label=\"Password\" formik={formik} type={\"password\"}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Submit button*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"submitRow2\"}>\r\n                        <Button className={\"login-button\"} type={\"submit\"}>Login</Button>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customer,\r\n        cart: state.cart\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(LoginPage);","// Created by David Walshe on 12/03/2020\r\n\r\n// Handles login requests to the customer service\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst registerRequest = async (values, setShowToast) => {\r\n    return serviceRequest({\r\n        service: \"customer\",\r\n        endpoint: \"register\",\r\n        method: \"POST\",\r\n        body: values\r\n    }).then((res) => {\r\n        if (res.error === \"EMAIL_IN_USE\") {\r\n            setShowToast(true);\r\n        } else {\r\n            return res;\r\n        }\r\n    })\r\n};\r\n\r\nexport default registerRequest;","// Created by David Walshe on 26/02/2020\r\n\r\n// npm imports\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport registerRequest from \"../requests/customer/register\";\r\nimport {registerCustomer} from \"../actions/customers\";\r\n\r\nconst RegistrationValidator = (dispatch, setShowToast) => {\r\n    return useFormik({\r\n        initialValues: {\r\n            firstName: \"Fake\",\r\n            lastName: \"Account\",\r\n            email: \"test2@example.com\",\r\n            phone: \"0871234567\",\r\n            password: \"12345678\",\r\n            verifyPassword: \"12345678\",\r\n            address1: \"Apartment A\",\r\n            address2: \"False Rd.\",\r\n            city: \"Cork City\",\r\n            state: \"Cork\",\r\n            country: \"Ireland\",\r\n            eircode: \"A00B012\",\r\n            isAdmin: false\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n                .max(15, 'Must be 15 characters or less')\r\n                .required('First name required'),\r\n            lastName: Yup.string()\r\n                .max(20, 'Must be 20 characters or less')\r\n                .required('Last name required'),\r\n            email: Yup.string()\r\n                .email('Invalid email address')\r\n                .required('No email was provided'),\r\n            phone: Yup.string()\r\n                .matches(\"\\\\+?[0-9 ]+\", \"Can only contain numbers\")\r\n                .trim(\"Remove leading/trailing whitespace\")\r\n                .required('No phone number was provided'),\r\n            password: Yup.string()\r\n                .min(8, \"Passwords must be over 8 characters long\")\r\n                .required('No password was provided'),\r\n            verifyPassword: Yup.string()\r\n                .oneOf([Yup.ref(\"password\")], \"Passwords are not the same\")\r\n                .required('No password was provided'),\r\n            address1: Yup.string()\r\n                .required('Street name is required'),\r\n            address2: Yup.string(),\r\n            city: Yup.string()\r\n                .required('City name is required'),\r\n            state: Yup.string()\r\n                .required('State is required'),\r\n            country: Yup.string()\r\n                .required('Country is required'),\r\n            eircode: Yup.string()\r\n                .required('Zip is required'),\r\n        }),\r\n        onSubmit: async (values) => {\r\n            console.log(values);\r\n            try {\r\n                await dispatch(registerCustomer(await registerRequest(values, setShowToast)));\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n    })\r\n};\r\n\r\nexport default RegistrationValidator;","// Created by David Walshe on 12/03/2020\r\n\r\nimport {Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nconst CheckBoxField = ({label, name, formik, type = \"checkbox\"}) => {\r\n\r\n    // Unpack variables\r\n    const {onChange, onBlur, value} = {...formik.getFieldProps(name)};\r\n    const touched = formik.touched[`${name}`];\r\n    const error = formik.errors[`${name}`];\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                {/*<Col xs={{span: 5, offset: 1}}>*/}\r\n                {/*    <Form.Label>{label}</Form.Label>*/}\r\n                {/*</Col>*/}\r\n                <Col md={{span: 10, offset: 0}}>\r\n                    <Form.Check\r\n                        type={type}\r\n                        label={label}\r\n                        name={name}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        onBlur={onBlur}\r\n                        isInvalid={touched && error}\r\n                        isValid={touched && !error}\r\n                    />\r\n                </Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    )\r\n};\r\n\r\n\r\nexport default CheckBoxField;","// Created by David Walshe on 25/02/2020\r\n\r\n// npm imports\r\nimport React, {useState} from \"react\";\r\nimport {Button, Col, Form} from \"react-bootstrap\"\r\n// Local imports\r\nimport RegistrationValidator from \"../validators/registrationValidator\";\r\nimport TextField from \"./FormHelpers/TextField\";\r\nimport \"../styles/styles.scss\"\r\nimport CheckBoxField from \"./FormHelpers/CheckboxField\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AccountToast from \"./AccountToast\";\r\n\r\nconst RegisterPage = (props) => {\r\n\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n    const returnPath = !!props.location.state ? props.location.state.returnPath : \"/\";\r\n\r\n    const formik = RegistrationValidator(props.dispatch, setShowToast);\r\n\r\n    const fieldWidth = 3;\r\n    const fieldOffset = 3;\r\n\r\n    if (props.customer.token) {\r\n        return <Redirect to={returnPath}/>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AccountToast show={showToast} setShow={setShowToast} message={\"That email is already in use.\"}/>\r\n            <Form noValidate onSubmit={formik.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md={{span: fieldWidth + 2, offset: fieldOffset + 1}}>\r\n                        {/*Heading*/}\r\n                        <h4 className={\"welcome-msg\"}>Welcome to CIT Auto Buyers.</h4>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md={{span: fieldWidth + 3, offset: fieldOffset + 1}}>\r\n                        {/*Sub-Heading*/}\r\n                        <h5 className={\"welcome-msg__details\"}>To create your new account we will just need a few\r\n                            details.</h5>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*First Name*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"firstName\"}>\r\n                        <TextField name=\"firstName\" label=\"First Name\" formik={formik}/>\r\n                    </Form.Group>\r\n                    {/*Last Name*/}\r\n                    <Form.Group as={Col} md={fieldWidth} controlId={\"lastName\"}>\r\n                        <TextField name=\"lastName\" label=\"Last Name\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Email*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"email\"}>\r\n                        <TextField name=\"email\" label=\"Email\" formik={formik} type={\"email\"}/>\r\n                    </Form.Group>\r\n                    {/*Phone*/}\r\n                    <Form.Group as={Col} md={fieldWidth} controlId={\"phone\"}>\r\n                        <TextField name=\"phone\" label=\"Phone Number\" formik={formik} type={\"phone\"}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*/!*Password*!/*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"password\"}>\r\n                        <TextField name=\"password\" label=\"Password\" formik={formik} type={\"password\"}/>\r\n                    </Form.Group>\r\n                    {/*/!*Verify Password*!/*/}\r\n                    <Form.Group as={Col} md={fieldWidth} controlId={\"verifyPassword\"}>\r\n                        <TextField name=\"verifyPassword\" label=\"Verify Password\" formik={formik} type={\"password\"}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*/!*Address1*!/*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"address1\"}>\r\n                        <TextField name=\"address1\" label=\"Street Name\" formik={formik}/>\r\n                    </Form.Group>\r\n                    {/*/!*Address2*!/*/}\r\n                    <Form.Group as={Col} md={fieldWidth} controlId={\"address2\"}>\r\n                        <TextField name=\"address2\" label=\"Address Line 2\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*/!*City*!/*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"city\"}>\r\n                        <TextField name=\"city\" label=\"City\" formik={formik}/>\r\n                    </Form.Group>\r\n                    {/*/!*County*!/*/}\r\n                    <Form.Group as={Col} md={fieldWidth} controlId={\"state\"}>\r\n                        <TextField name=\"state\" label=\"County\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Country*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"country\"}>\r\n                        <TextField name=\"country\" label=\"Country\" formik={formik}/>\r\n                    </Form.Group>\r\n                    {/*ZIP*/}\r\n                    <Form.Group as={Col} md={fieldWidth} controlId={\"eircode\"}>\r\n                        <TextField name=\"eircode\" label=\"Eircode\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Admin Flag*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"isAdmin\"}>\r\n                        <CheckBoxField name={\"isAdmin\"} label={\"Is this an admin account?\"} formik={formik}/>\r\n                    </Form.Group>\r\n                    {/*Submit button*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth * 2, offset: fieldOffset}} controlId={\"submit\"}>\r\n                        <Button className={\"create-account-button\"} type={\"submit\"}>Create account</Button>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customer\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(RegisterPage);","// Created by David Walshe on 26/02/2020\r\n\r\n// npm imports\r\nimport React from \"react\";\r\n\r\nconst NotFoundPage = () => (\r\n    <>\r\n        <p>404 - Page not found</p>\r\n    </>\r\n);\r\n\r\nexport default NotFoundPage;","// Created by David Walshe on 11/03/2020\r\n\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Badge, Col, Row} from \"react-bootstrap\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CartIcon = (props) => {\r\n\r\n    // Local States\r\n    const [items, setItems] = useState(props.cart.items);\r\n    const [quantity, setQuantity] = useState(0);\r\n    const [price, setPrice] = useState(0);\r\n\r\n    // Update quantity on props.cart change\r\n    useEffect(() => {\r\n        setItems(props.cart.items);\r\n    }, [props.cart]);\r\n\r\n    // Get the overall quantity and price of items in the cart after\r\n    // item us updated in the above useEffect.\r\n    useEffect(() => {\r\n        let qty = 0;\r\n        let price = 0;\r\n        // console.log(\"ITEMS\", items);\r\n        items.forEach((item) => {\r\n            qty += item.quantity;\r\n            price += (item.quantity * item.price);\r\n        });\r\n        setQuantity(qty);\r\n        setPrice(price.toFixed(2));\r\n    }, [items]);\r\n\r\n\r\n    return (\r\n        <Row>\r\n            <Col xs={1}>\r\n                <img\r\n                    src=\"/images/shopping_cart.png\"\r\n                    width=\"40\"\r\n                    height=\"40\"\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"React Bootstrap logo\"\r\n                />\r\n            </Col>\r\n            <Col xs={4}>\r\n                <Badge pill variant={\"warning\"}>{quantity}</Badge>\r\n            </Col>\r\n            <Col xs={2}>\r\n                <h5 className={\"header-pricing\"}>€{price}</h5>\r\n            </Col>\r\n        </Row>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cart: state.cart\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(CartIcon);","// Created by David Walshe on 07/03/2020\r\n\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport CartIcon from \"./CartIcon\";\r\n\r\nconst LoggedOut = () => {\r\n\r\n    return (\r\n        <Nav>\r\n            <Navbar.Brand as={Link} to={\"/cart\"}>\r\n                <CartIcon/>\r\n            </Navbar.Brand>\r\n            <Nav.Link as={NavLink} to={\"/login\"} activeClassName={\"active\"}>Login</Nav.Link>\r\n            <Nav.Link as={NavLink} to={\"/register\"} activeClassName={\"active\"}>Register</Nav.Link>\r\n        </Nav>\r\n    )\r\n};\r\n\r\nexport default LoggedOut;","// Created by David Walshe on 07/03/2020\r\n\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport CartIcon from \"./CartIcon\";\r\n\r\nconst LoggedIn = () => {\r\n\r\n    return (\r\n        <Nav>\r\n            <Navbar.Brand as={Link} to={\"/cart\"}>\r\n                <CartIcon/>\r\n            </Navbar.Brand>\r\n            <Nav.Link as={NavLink} to={\"/orders\"} activeClassName={\"active\"}>My Orders</Nav.Link>\r\n            <Nav.Link as={NavLink} to={\"/logout\"} activeClassName={\"active\"}>Logout</Nav.Link>\r\n        </Nav>\r\n    )\r\n};\r\n\r\nexport default LoggedIn;","// Created by David Walshe on 07/03/2020\r\n\r\nimport {Nav} from \"react-bootstrap\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nconst Admin = () => {\r\n\r\n    return (\r\n        <Nav>\r\n            <Nav.Link as={NavLink} to={\"/newProduct\"} activeClassName={\"active\"}>Register Product</Nav.Link>\r\n            <Nav.Link as={NavLink} to={\"/logout\"} activeClassName={\"active\"}>Logout</Nav.Link>\r\n        </Nav>\r\n    )\r\n};\r\n\r\nexport default Admin;","// Created by David Walshe on 26/02/2020\r\n\r\n// npm imports\r\nimport React, {useEffect, useState} from \"react\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Nav, Navbar} from \"react-bootstrap\";\r\nimport {connect} from \"react-redux\"\r\n// Local imports\r\nimport \"../../styles/styles.scss\";\r\nimport LoggedOut from \"./LoggedOut\";\r\nimport LoggedIn from \"./LoggedIn\";\r\nimport Admin from \"./Admin\";\r\n\r\nconst PageNavbar = (props) => {\r\n\r\n    const [pageLoginState, setPageLoginState] = useState(<LoggedOut/>);\r\n    const [accountName, setAccountName] = useState(`${props.firstName} ${props.lastName}`);\r\n\r\n    useEffect(() => {\r\n        if (!!props.token) {\r\n            setPageLoginState(props.isAdmin === true ? <Admin/> : <LoggedIn/>);\r\n        } else {\r\n            setPageLoginState(<LoggedOut/>)\r\n        }\r\n    }, [props.token, props.isAdmin]);\r\n\r\n    useEffect(() => {\r\n        if (!!props.firstName) {\r\n            setAccountName(`${props.firstName} ${props.lastName}`)\r\n        } else {\r\n            setAccountName(null);\r\n        }\r\n    }, [props.firstName, props.lastName]);\r\n\r\n    return (\r\n        <>\r\n            <Navbar fixed={\"top\"} expand={\"lg\"} bg={\"dark\"} variant={\"dark\"}>\r\n                <Navbar.Brand as={NavLink} to={\"/products\"}>CIT Auto Buyers</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link as={NavLink} to={\"/products\"} activeClassName={\"active\"}>Products</Nav.Link>\r\n                    </Nav>\r\n                    <Nav className=\"mr-auto\">\r\n                        {!!accountName ? <Nav.Link as={NavLink} to={\"/orders\"}\r\n                                                   activeClassName={\"active\"}>Logged in\r\n                            as {accountName}</Nav.Link> : null}\r\n                    </Nav>\r\n                    {pageLoginState}\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        firstName: state.customer.firstName,\r\n        lastName: state.customer.lastName,\r\n        token: state.customer.token,\r\n        isAdmin: state.customer.isAdmin\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(PageNavbar);","// Created by David Walshe on 26/02/2020\r\n\r\n// npm imports\r\nimport React from \"react\";\r\n// local imports\r\nimport \"../../styles/styles.scss\"\r\nimport PageNavbar from \"./PageNavbar\";\r\n\r\nconst Header = () => (\r\n    <div className={\"header\"}>\r\n        <PageNavbar className={\"navbar\"}/>\r\n    </div>\r\n);\r\n\r\nexport default Header;","// Created by David Walshe on 17/03/2020\r\n\r\n// Request Data from catalog service\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst newProductRequest = async (data) => {\r\n    const {name, price, quantity, image} = {...data};\r\n\r\n    const response = await serviceRequest({\r\n        service: \"catalog\",\r\n        endpoint: \"newProduct\",\r\n        method: \"POST\",\r\n        body: {\r\n            name,\r\n            price,\r\n            quantity,\r\n            image\r\n        }\r\n    });\r\n};\r\n\r\nexport default newProductRequest;","// Created by David Walshe on 07/03/2020\r\n\r\nimport {useFormik} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport newProductRequest from \"../requests/product/newProduct\";\r\n\r\nconst NewProductValidator = () => {\r\n    return useFormik({\r\n        initialValues: {\r\n            name: \"\",\r\n            price: \"\",\r\n            quantity: \"\",\r\n            image: \"/images/\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n                .required('No product name was provided'),\r\n            price: Yup.number()\r\n                .required('No price was provided')\r\n                .min(0.01),\r\n            quantity: Yup.number()\r\n                .required('No quantity was provided')\r\n                .min(1, \"Value must be 1 or greater to be valid\")\r\n                .integer(\"Input must be a whole number\"),\r\n            image: Yup.string()\r\n                .required(\"Image path is required\")\r\n                .min(\"/images/\".length)\r\n                .matches(/.*\\.(png|jpeg|jpg)$/, {message: \"Selected image must have a .png/.jpeg/.jpg file extension\"})\r\n        }),\r\n        onSubmit: values => {\r\n            newProductRequest(values);\r\n        },\r\n    });\r\n};\r\n\r\nexport default NewProductValidator;","// Created by David Walshe on 07/03/2020\r\n\r\n// npm imports\r\nimport React from \"react\";\r\nimport {Button, Col, Form} from \"react-bootstrap\";\r\n// local imports\r\nimport TextField from \"./FormHelpers/TextField\";\r\nimport NewProductValidator from \"../validators/newProductValidator\";\r\n\r\nconst NewProductPage = () => {\r\n\r\n    const formik = NewProductValidator();\r\n\r\n    const fieldWidth = 3;\r\n    const fieldOffset = 3;\r\n\r\n    return (\r\n        <>\r\n            <Form noValidate onSubmit={formik.handleSubmit}>\r\n                <Form.Row>\r\n                    <Form.Group as={Col} md={{span: fieldWidth + 2, offset: fieldOffset + 1}}>\r\n                        {/*Heading*/}\r\n                        <h4>Add a new product to the store inventory.</h4>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Product*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth * 2, offset: fieldOffset}} controlId={\"name\"}>\r\n                        <TextField name=\"name\" label=\"Product Name\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Price*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset}} controlId={\"price\"}>\r\n                        <TextField name=\"price\" label=\"Unit Price\" formik={formik}/>\r\n                    </Form.Group>\r\n                    {/*Quantity*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: 0}} controlId={\"quantity\"}>\r\n                        <TextField name=\"quantity\" label=\"Quantity In-Stock\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Image*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth * 2, offset: fieldOffset}} controlId={\"image\"}>\r\n                        <TextField name=\"image\" label=\"Product Image\" formik={formik}/>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    {/*Submit button*/}\r\n                    <Form.Group as={Col} md={{span: fieldWidth, offset: fieldOffset + 5}} controlId={\"submitRow3\"}>\r\n                        <Button type={\"submit\"}>Add Product</Button>\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            </Form>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default NewProductPage;","// Created by David Walshe on 08/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\n// Handles logout requests to the customer service\r\nconst logoutRequest = async (token) => {\r\n\r\n    return serviceRequest({\r\n        service: \"customer\",\r\n        endpoint: \"logout\",\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Authorization\": `Bearer ${token}`\r\n        }\r\n    });\r\n\r\n};\r\n\r\nexport default logoutRequest;","// Created by David Walshe on 07/03/2020\r\n\r\n// Created by David Walshe on 25/02/2020\r\n\r\n// npm imports\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {connect} from \"react-redux\"\r\n// local imports\r\nimport logoutRequest from \"../requests/customer/logout\";\r\nimport {logoutCustomer} from \"../actions/customers\"\r\nimport {removeAll} from \"../actions/cart\";\r\n\r\nclass LogoutPage extends React.Component {\r\n\r\n    state = {\r\n        token: this.props.token,\r\n        dispatch: this.props.dispatch,\r\n        content: <></>\r\n    };\r\n\r\n    async componentDidMount() {\r\n\r\n        // When logging out, wait until the customer data is cleared before returning to the\r\n        // login page.\r\n        if (!!this.state.token) {\r\n            try {\r\n                // Empty the cart on logout.\r\n                this.state.dispatch(removeAll());\r\n                // Update th customer state to null on logout.\r\n                this.state.dispatch(\r\n                    logoutCustomer(\r\n                        // Request to logout and on success, render login page.\r\n                        await logoutRequest(this.state.token).then(() => {\r\n                            this.state.content = <Redirect to={\"/login\"}/>\r\n                        })\r\n                    )\r\n                );\r\n            } catch (e) {\r\n                console.log(\"error\", e)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return this.state.content;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.customer.token,\r\n        cart: state.cart\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(LogoutPage);","// Created by David Walshe on 15/03/2020\r\n\r\nimport serviceRequest from \"../baseRequest\";\r\n\r\nconst getOrderData = async (setOrders, customerID, error, setError) => {\r\n    if (!error) {\r\n\r\n        console.log(customerID);\r\n\r\n        try {\r\n            const orders = await serviceRequest({\r\n                service: \"order\",\r\n                endpoint: `getOrders/${customerID}`,\r\n                method: \"GET\",\r\n                body: null\r\n            }).then((data) => {\r\n                // Update state\r\n                console.log(\"orders\", data);\r\n                setOrders(\r\n                    data\r\n                );\r\n            });\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n            setError(e);\r\n        }\r\n    }\r\n};\r\n\r\nexport default getOrderData;","// Created by David Walshe on 15/03/2020\r\n\r\nimport React, {useEffect, useState} from \"react\";\r\nimport getOrderData from \"../../requests/order/getOrderData\";\r\nimport {connect} from \"react-redux\";\r\nimport {MDBBtn, MDBDataTable} from 'mdbreact';\r\nimport \"../../styles/styles.scss\";\r\n\r\nconst OrderTable = (props) => {\r\n\r\n    const {setShow, customerID, setModalData} = {...props};\r\n\r\n    const [orders, setOrders] = useState({});\r\n    const [tableData, setTableData] = useState({});\r\n    const [error, setError] = useState(undefined);\r\n\r\n    // Fetch order data on page load.\r\n    useEffect(() => {\r\n        getOrderData(setOrders, customerID, error, setError)\r\n    }, []);\r\n\r\n    // Column setup for Table\r\n    const columns = [\r\n        {\r\n            label: 'Order No.',\r\n            field: 'orderNo',\r\n            sort: 'asc',\r\n            width: 100\r\n        },\r\n        {\r\n            label: 'Sale Date',\r\n            field: 'saleDate',\r\n            sort: 'asc',\r\n            width: 220\r\n        },\r\n        {\r\n            label: \"Order Size\",\r\n            field: \"orderSize\",\r\n            sort: \"asc\",\r\n            width: 220\r\n        },\r\n        {\r\n            label: 'Order Total',\r\n            field: 'orderTotal',\r\n            sort: 'asc',\r\n        },\r\n        {\r\n            label: '',\r\n            field: 'button',\r\n            sort: 'asc',\r\n            width: 135,\r\n            align: \"center\"\r\n        },\r\n    ];\r\n\r\n    const createTableRow = (order) => {\r\n        let orderTotal = 0;\r\n        let orderSize = 0;\r\n        order.orderDetails.forEach((item) => {\r\n            orderSize += item.quantity;\r\n            orderTotal += (item.quantity * item.price);\r\n        });\r\n        orderTotal = orderTotal.toFixed(2);\r\n        order.saledate = convertMillisToDataTime(order.saledate);\r\n\r\n        return {\r\n            orderNo: `${order.orderID}`,\r\n            saleDate: order.saledate,\r\n            orderSize: `${orderSize}`,\r\n            orderTotal: `${orderTotal}`,\r\n            button: <MDBBtn color=\"light-blue\" size=\"sm\" onClick={(e) => {\r\n                order = {\r\n                    ...order,\r\n                    orderSize,\r\n                    orderTotal\r\n                };\r\n                setModalData(order);\r\n                setShow(true);\r\n            }}>Order\r\n                Info</MDBBtn>,\r\n        }\r\n    };\r\n\r\n    const convertMillisToDataTime = (saleDateInMs) => {\r\n        const datetime = new Date(0);\r\n        datetime.setTime(saleDateInMs);\r\n\r\n        let date = `${datetime.getDate()}`.padStart(2, 0);\r\n        let month = `${datetime.getMonth() + 1}`.padStart(2, 0);\r\n        let year = datetime.getFullYear();\r\n\r\n        return `${year}/${month}/${date}`;\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(\"ORDERS\", orders);\r\n        if (Object.keys(orders).length > 0) {\r\n            // Create the table rows.\r\n            const rows = orders.map((order) => {\r\n                return createTableRow(order);\r\n            });\r\n\r\n            // Create the table data object\r\n            setTableData({\r\n                columns: columns,\r\n                rows: rows\r\n            });\r\n        }\r\n    }, [orders]);\r\n\r\n    try {\r\n        return (\r\n            <>\r\n                <MDBDataTable\r\n                    striped\r\n                    bordered\r\n                    small\r\n                    order={['saleDate', 'desc']}\r\n                    data={tableData}/>\r\n            </>\r\n        )\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customerID: state.customer.customerID\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(OrderTable);","// Created by David Walshe on 15/03/2020\r\n\r\nimport React from \"react\";\r\n\r\nconst OrderItems = (props) => {\r\n\r\n    const items = props.modalData.orderDetails;\r\n\r\n    return (\r\n        <>\r\n            {items.map((item) => {\r\n                return (<tr key={item}>\r\n                        <td>{item.productID}</td>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.quantity}</td>\r\n                        <td>€{item.price}</td>\r\n                        <td>€{(item.price * item.quantity).toFixed(2)}</td>\r\n                    </tr>\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n\r\n};\r\n\r\nexport default OrderItems;","// Created by David Walshe on 15/03/2020\r\n\r\nimport {Button, Modal, Table} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport OrderItems from \"./OrderItems\";\r\n\r\n\r\nconst OrderModal = (props) => {\r\n\r\n    const {show, setShow, modalData} = {...props};\r\n\r\n    console.log(\"MODAL\", modalData);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    // const getMessage = () => {\r\n    //     return {\r\n    //         header: \"Hello Word\", //order.orderID,\r\n    //         body: `${order.totalPrice}`,\r\n    //     }\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            {/*{renderRedirect()}*/}\r\n            <Modal\r\n                show={show}\r\n                size={\"lg\"}\r\n                onHide={() => setShow(false)}\r\n                dialogClassName=\"modal-90w\"\r\n                aria-labelledby=\"login-warning-message\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"login-warning-message\">\r\n                        {/*{getMessage().header}*/}\r\n                        Order No. {modalData.orderID}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Sale date: {modalData.saledate}</h4>\r\n                    <Table striped bordered hover>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>ProductID</th>\r\n                            <th>Product Name</th>\r\n                            <th>Quantity</th>\r\n                            <th>Unit Price</th>\r\n                            <th>Total Price</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        <OrderItems modalData={modalData}/>\r\n                        </tbody>\r\n                    </Table>\r\n                    <h4>Total: €{modalData.orderTotal}</h4>\r\n                    <Button\r\n                        className={\"modal-button-secondary\"}\r\n                        variant=\"primary\"\r\n                        onClick={handleClose}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderModal;","// Created by David Walshe on 15/03/2020\r\n\r\nimport React, {useState} from \"react\";\r\nimport OrderTable from \"./OrderTable\";\r\nimport {Col, Container} from \"react-bootstrap\";\r\nimport OrderModal from \"./OrderModal\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\n\r\nconst OrderPage = () => {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [modalData, setModalData] = useState({});\r\n\r\n    return (\r\n        <>\r\n            <OrderModal show={show} setShow={setShow} modalData={modalData}/>\r\n            <Container fluid={true}>\r\n                <Col xs={{span: 6, offset: 3}}>\r\n                    <h1>Orders</h1>\r\n                    <OrderTable setShow={setShow} setModalData={setModalData}/>\r\n                </Col>\r\n            </Container>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default OrderPage;","// Created by David Walshe on 25/02/2020\r\n\r\n// npm imports\r\nimport React from \"react\";\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\n// local imports\r\nimport ProductPage from \"../components/ProductPage/ProductPage\";\r\nimport CartPage from \"../components/CartPage/CartPage\"\r\nimport LoginPage from \"../components/LoginPage\";\r\nimport RegisterPage from \"../components/RegisterPage\";\r\nimport NotFoundPage from \"../components/NotFoundPage\";\r\nimport Header from \"../components/Header/Header\";\r\nimport NewProductPage from \"../components/NewProductPage\";\r\nimport LogoutPage from \"../components/LogoutPage\";\r\nimport OrderPage from \"../components/OrderPage/OrderPage\";\r\n\r\n\r\nconst AppRouter = () => (\r\n    <Router>\r\n        <>\r\n            <Header/>\r\n            <Switch>\r\n                <Route path={[\"/\", \"/products\"]} component={ProductPage} exact={true}/>\r\n                <Route path={\"/cart\"} component={CartPage}/>\r\n                <Route path={\"/login\"} component={LoginPage}/>\r\n                <Route path={\"/register\"} component={RegisterPage}/>\r\n                <Route path={\"/newProduct\"} component={NewProductPage}/>\r\n                <Route path={\"/orders\"} component={OrderPage}/>\r\n                <Route path={\"/logout\"} component={LogoutPage}/>\r\n                <Route component={NotFoundPage}/>\r\n            </Switch>\r\n        </>\r\n    </Router>\r\n);\r\n\r\nexport default AppRouter;","// Created by David Walshe on 08/03/2020\r\n\r\n// Default initial state of Reducer on startup\r\nconst userReducerDefaultState = {\r\n    customerID: null,\r\n    token: undefined\r\n};\r\n\r\nconst customerReducer = (state = userReducerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return {\r\n                ...state,\r\n                ...action.customer,\r\n                token: action.token\r\n            };\r\n        case \"LOGOUT\":\r\n            return {\r\n                ...userReducerDefaultState\r\n            };\r\n        case \"REGISTER\":\r\n            return {\r\n                ...state,\r\n                ...action.customer,\r\n                token: action.token\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default customerReducer;","// Created by David Walshe on 09/03/2020\r\n\r\n// Default initial state of Reducer on startup\r\nconst cartReducerDefaultState = {\r\n    items: []\r\n};\r\n\r\nconst cartReducer = (state = cartReducerDefaultState, action) => {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            const itemExists = state.items.some((item) => item.productID === action.item.productID);\r\n            if (itemExists) {\r\n                return {\r\n                    items: [...state.items.map((item) => {\r\n                        if (item.productID === action.item.productID) {\r\n                            item.quantity += action.item.quantity;\r\n                            return item;\r\n                        } else {\r\n                            return item;\r\n                        }\r\n                    })]\r\n                };\r\n            } else {\r\n                return {\r\n                    items: [...state.items, action.item]\r\n                }\r\n            }\r\n        case \"SYNC\":\r\n            return {\r\n                items: action.items,\r\n            };\r\n        case \"REMOVE\":\r\n            return {\r\n                items: [...state.items.filter((item) => {\r\n                    if (item.productID !== action.productID) {\r\n                        return item;\r\n                    }\r\n                })]\r\n            };\r\n        case \"REMOVE_ALL\":\r\n            return {\r\n                items: []\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cartReducer;","// Created by David Walshe on 25/02/2020\r\n\r\n// npm imports\r\nimport {combineReducers, createStore} from \"redux\";\r\nimport {persistReducer, persistStore} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"\r\n// local imports\r\nimport customerReducer from \"../reducers/customers\"\r\nimport cartReducer from \"../reducers/cart\"\r\n\r\n// Set up persistence config for state\r\nconst customerPersistConfig = {\r\n    key: \"customer\",\r\n    storage\r\n};\r\n\r\nconst cartPersistConfig = {\r\n    key: \"cart\",\r\n    storage\r\n};\r\n\r\n// Wrap custom reducers in persistence Reducer\r\nconst persistedCustomerReducer = persistReducer(customerPersistConfig, customerReducer);\r\nconst persistedCartReducer = persistReducer(cartPersistConfig, cartReducer);\r\n\r\n// Create Redux store for handling React app state.\r\nexport default () => {\r\n    let store = createStore(combineReducers({\r\n            customer: persistedCustomerReducer,\r\n            cart: persistedCartReducer\r\n        }\r\n    ));\r\n    let persistor = persistStore(store);\r\n    return {store, persistor};\r\n}","// npm imports\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRouter from \"./routers/AppRouter\";\r\n// import '@fortawesome/fontawesome-free/css/all.min.css';\r\n// import 'bootstrap-css-only/css/bootstrap.min.css';\r\n// import 'mdbreact/dist/css/mdb.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./styles/styles.scss\"\r\nimport {Provider} from \"react-redux\";\r\nimport {PersistGate} from \"redux-persist/integration/react\";\r\n// local imports\r\nimport configureStore from \"./store/configureStore\";\r\n\r\n// Get the store and the persistence entity to persist state between refreshes.\r\nconst {store, persistor} = configureStore();\r\n\r\nconsole.log(store.getState());\r\n\r\nconst jsxRoot = (\r\n    <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n            <AppRouter/>\r\n        </PersistGate>\r\n    </Provider>\r\n);\r\n\r\n// const unsubscribe = store.subscribe(() => {\r\n//     // localStorage.setItem(\"customer\", {});\r\n//     // localStorage.setItem(\"customer\", JSON.stringify(store.getState().customer));\r\n// });\r\n\r\nReactDOM.render(jsxRoot, document.getElementById('root'));\r\n"],"sourceRoot":""}